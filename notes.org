* Notes
Example of what not to do, aka an insecure 'SessionsController#create' method:
#+begin_src ruby
  def create
    user = User.find_by(username: params[:username])
    if params[:password] == user.password
      session[:user_id] = user.id
      render json: user, status: :created
    else
      render json: { error: "Invalid username or password" }, status: :unauthorized
    end
  end
#+end_src

Simplified version of a 'hash' function which finds the sum of the bytes that comprise the string:
#+begin_src ruby
  def dumb_hash(input)
    input.bytes.reduce(:+)
  end
#+end_src

This is an example of a User model in this scenario:
#+begin_src ruby
# app/models/user.rb
class User < ApplicationRecord

  # takes a plaintext password and stores a hashed version as a password_digest
  def password=(new_password)
    self.password_digest = dumb_hash(new_password)
  end

  # checks if the hashed plaintext password matches the password_digest
  def authenticate(password)
    return nil unless dumb_hash(password) == password_digest
    self
  end

  private

  # the hashing method
  def dumb_hash(input)
    input.bytes.reduce(:+)
  end
end
#+end_src

Related 'SessionsController' controller in this scenario:
#+begin_src ruby
# app/controllers/sessions_controller.rb
class SessionsController < ApplicationController
  def create
    user = User.find_by(username: params[:username])
    if user&.authenticate(params[:password])
      session[:user_id] = user.id
      render json: user, status: :created
    else
      render json: { error: "Invalid username or password" }, status: :unauthorized
    end
  end
end
#+end_src

NOTE:
- The '&.' operator is called the 'Safe Navigation Operator'
- This means that if the user is 'nil', it will return 'nil'
- This also means that if it is not 'nil', it will then call the '.authenticate' method on the 'user' variable
- It is equivalent to the following:
#+begin_src ruby
user && user.authenticate(params[:password])
#+end_src

NOTE:
- Ruby uses 'MurmurHash' for its hashing capabilities:
- https://en.wikipedia.org/wiki/MurmurHash

Rails uses 'BCrypt' to encrypt passwords (https://github.com/bcrypt-ruby/bcrypt-ruby)

BCrypt has three properties in mind:
- It hashes similar strings to very different values
- It is a cryptographic hash
- It is designed to be slow

Salt: a random string prepended to the password before hashing it

In order to use 'BCrypt', you need to update the 'Gemfile' accordingly:
#+begin_src ruby
# Gemfile:
gem 'bcrypt'
#+end_src

You then need to update your 'User' model with references to a 'salt' variable:
#+begin_src ruby
# app/models/user.rb
class User < ActiveRecord::Base

  # generate a salted + hashed password and save it to password_digest
  def password=(new_password)
    salt = BCrypt::Engine::generate_salt
    # => $2a$12$UW5etUc/o1YL4sSdeTBPku
    self.password_digest = BCrypt::Engine::hash_secret(new_password, salt)
    # => $2a$12$UW5etUc/o1YL4sSdeTBPkueUWwNIPNdQNAwzuSGkS3L5coBKMMZHm"
  end

  # check the plaintext password against the salted + hashed password
  def authenticate(password)
    # Salts generated by generate_salt are always 29 chars long.
    salt = password_digest[0..28]
    # compare the saved password_digest against the plaintext password by running the plaintext password through the same hashing function
    return nil unless BCrypt::Engine::hash_secret(password, salt) == self.password_digest
    self
  end
end
#+end_src

The 'users.password_digest' stores the 'salt' and the actual return value of 'BCrypt'.

How It Is Checked:
- The password given in 'params' hash is checked through BCrypt along with the related 'salt' value.
- If they match, the user is allowed to login
- If they don't, they are rejected

Rail's Method Of Using 'has_secure_password':
- Instead of having to do all of the above, 'has_secure_password' is a Rails specific function that does all of this for you, as long as you have the 'BCrypt' gem within your Gemfile of your project
- By using 'has_secure_password', Rails will then use 'bcrypt' gem to hash and salt all passwords on the 'User' model

NOTE:
- The 'has_secure_password' method gives two instance methods on the 'User' model which include 'password' and 'password_confirmation'
- However, these are only available if you create a database column called 'password_digest' within the related migration:
#+begin_src ruby
  create_table :users do |t|
    t.string :username
    t.string :password_digest

    t.timestamps
  end
#+end_src
- The 'password' and 'password_confirmation' instance methods allow you to easily include password and password confirmation fields in a signup or password reset form in a frontend React web application

How 'has_secure_password' Works:
- This handles the fields by adding a 'before_save' hook to the model to compare the 'password' and 'password_confirmation'
- If they match / or if the 'password_confirmation' is nil --> the user is saved, and the hashed version of the password is saved in the 'password_digest' column of the database

Related Exception Handling For 'has_secure_password' Instance Method:
- Since 'has_secure_password' calls an Active Record helper method, you can use 'ActiveRecord::RecordInvalid' with 'rescue', or 'rescue_from'

Related Secure Frontend React Web Application:
#+begin_src js
function SignUp({ onLogin }) {
  const [username, setUsername] = useState("");
  const [password, setPassword] = useState("");
  const [passwordConfirmation, setPasswordConfirmation] = useState("");

  function handleSubmit(e) {
    e.preventDefault();
    fetch("/signup", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        username,
        password,
        password_confirmation: passwordConfirmation,
      }),
    })
      .then((r) => r.json())
      .then(onLogin);
  }

  return (
    <form onSubmit={handleSubmit}>
      <label htmlFor="username">Username:</label>
      <input
        type="text"
        id="username"
        value={username}
        onChange={(e) => setUsername(e.target.value)}
      />
      <label htmlFor="password">Password:</label>
      <input
        type="password"
        id="password"
        value={password}
        onChange={(e) => setPassword(e.target.value)}
      />
      <label htmlFor="password_confirmation">Confirm Password:</label>
      <input
        type="password"
        id="password_confirmation"
        value={passwordConfirmation}
        onChange={(e) => setPasswordConfirmation(e.target.value)}
      />
      <button type="submit">Submit</button>
    </form>
  );
}
#+end_src

Related Backend Of Secure Web Application's 'Users Controller':
#+begin_src ruby
# app/controllers/users_controller.rb
class UsersController < ApplicationController
  def create
    user = User.create(user_params)
    if user.valid?
      render json: user, status: :created
    else
      render json: { errors: user.errors.full_messages }, status: :unprocessable_entity
    end
  end

  private

  def user_params
    params.permit(:username, :password, :password_confirmation)
  end
end
#+end_src

Related 'Sessions Controller' In Secure Application's Backend:
#+begin_src ruby
# app/controllers/sessions_controller.rb
class SessionsController < ApplicationController
  def create
    user = User.find_by(username: params[:username])
    if user&.authenticate(params[:password])
      session[:user_id] = user.id
      render json: user, status: :created
    else
      render json: { error: "Invalid username or password" }, status: :unauthorized
    end
  end
end
#+end_src

Related 'User' Model In Secure Application's Backend:
#+begin_src ruby
# app/models/user.rb
class User < ActiveRecord::Base
  has_secure_password
end
#+end_src

Answers To Check Your Understanding:
- Q1. What setup steps do you need to complete to use BCrypt in your Rails app?
- Answer:
- You need to include 'bcrypt' in the 'Gemfile' of your project.
- You then need to utilize the instance methods, ':password', and ':password_confirmation' within the 'Users' Controller of your project.
- You then need to include the '&.authenticate' pattern within your 'Sessions Controller' of your project
- You then need to utilize the 'has_secure_password' Rails method within the 'Users' model
- Q2. What two things does BCrypt do to secure passwords?
- Answer: It utilizes a cryptographic hash, and is designed to be slow meaning that it is computationally expensive.
